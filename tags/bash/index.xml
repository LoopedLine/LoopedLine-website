<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on LoopedLine</title>
    <link>https://loopedline.com/tags/bash/</link>
    <description>Recent content in Bash on LoopedLine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Nov 2022 13:19:14 -0500</lastBuildDate>
    
	<atom:link href="https://loopedline.com/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Backing Up a Directory Structure With the Tree Command in a Bash Script</title>
      <link>https://loopedline.com/post/backing-up-a-directory-structure-with-the-tree-command-in-a-bash-script/</link>
      <pubDate>Mon, 07 Nov 2022 13:19:14 -0500</pubDate>
      
      <guid>https://loopedline.com/post/backing-up-a-directory-structure-with-the-tree-command-in-a-bash-script/</guid>
      <description>Introduction This post is part of a series about automating data backups in Linux.
In the previous post we automated the process to backup a .bashrc file with a Bash script.
Similarly, in this post we&amp;rsquo;ll automate the process of saving the layout of several specific directories with a Bash script.
The Script We&amp;rsquo;ve developed Bash scripts for automating tasks in previous posts, so we&amp;rsquo;ll leverage that work and modify it for our current purposes.</description>
    </item>
    
    <item>
      <title>Getting Started with the Tree Command in Bash</title>
      <link>https://loopedline.com/post/getting-started-with-the-tree-command-in-bash/</link>
      <pubDate>Sun, 06 Nov 2022 20:28:22 -0500</pubDate>
      
      <guid>https://loopedline.com/post/getting-started-with-the-tree-command-in-bash/</guid>
      <description>Introduction The tree command is extremely useful.
 According to tldr:
Tree shows &amp;ldquo;the contents of the current directory as a tree.&amp;quot;
 And according to the Tree homepage:
&amp;ldquo;Tree is a recursive directory listing command that produces a depth indented listing of files&amp;rdquo;.
 In other words, tree gives a visual display of the contents of a directory, includings its files, subdirectories, and the contents of those subdirectories.
It might best be understood by example.</description>
    </item>
    
    <item>
      <title>Backing Up the .bashrc File with a Bash Script</title>
      <link>https://loopedline.com/post/backing-up-the-bashrc-file-with-a-bash-script/</link>
      <pubDate>Fri, 04 Nov 2022 21:36:51 -0400</pubDate>
      
      <guid>https://loopedline.com/post/backing-up-the-bashrc-file-with-a-bash-script/</guid>
      <description>Introduction This post is part of a series about automating data backups in Linux.
In this post we&amp;rsquo;ll construct a Bash script to automate the backup of the .bashrc file.
The Script We&amp;rsquo;ve developed Bash scripts for automating tasks in previous posts so we&amp;rsquo;ll leverage that work and modify it for our current purposes.
Script code backup_bashrc.sh
#!/bin/bash  # VARIABLES bashrc_directory=&amp;#34;/home/$USER/&amp;#34; bashrc_filename=&amp;#34;.bashrc&amp;#34; backup_top_directory=&amp;#34;/home/$USER/backups/&amp;#34; backup_filename=&amp;#34;backup_of_bashrc_$(date +%Y-%m-%d)&amp;#34;  # VARIABLES, constructed bashrc_location=$bashrc_directory$bashrc_filename backup_output_directory=$backup_top_directory$backup_filename  # FUNCTION # Provides contextual output script_info() { echo echo echo echo echo ============================================================= echo ==================== script info - START ==================== echo echo &amp;#34;Executing $BASH_SOURCE&amp;#34; echo echo &amp;#34;.</description>
    </item>
    
    <item>
      <title>Adding Sequence IDs to Hugo Post Filenames</title>
      <link>https://loopedline.com/post/adding-sequence-ids-to-hugo-post-filenames/</link>
      <pubDate>Sun, 29 May 2022 08:14:26 -0400</pubDate>
      
      <guid>https://loopedline.com/post/adding-sequence-ids-to-hugo-post-filenames/</guid>
      <description>Background This project is built with Hugo and uses the Minimal Hugo theme.
Currently, when new posts are created with the hugo new &amp;lt;file_name&amp;gt; command, a new file is created named with the file_name parameter passed to the command. With the help of the post archetype file, that filename is also used to create the post title.
That approach is fine for a small number of posts, but as the number of posts grows it becomes harder to find a specific post when looking, because files are sorted alphabetically by filename, which isn&amp;rsquo;t particularly helpful in many cases.</description>
    </item>
    
    <item>
      <title>Creating a Persistent Sequence ID Counter With Bash</title>
      <link>https://loopedline.com/post/creating-a-persistent-sequence-id-counter-with-bash/</link>
      <pubDate>Fri, 27 May 2022 22:31:44 -0400</pubDate>
      
      <guid>https://loopedline.com/post/creating-a-persistent-sequence-id-counter-with-bash/</guid>
      <description>Objective In this post we&amp;rsquo;ll create a persistent counter for generating unique sequence IDs using a Bash script.
Building the solution We&amp;rsquo;ll build the persistent counter using two files
 a counter file that stores the next seqid a script that reads and increments the seqid  Creating the counter file Creating the counter file is very simple.
We&amp;rsquo;ll create a file named counter_next_test.txt with the Bash command:
touch counter_next_test.txt And we&amp;rsquo;ll populate it with the value 1 with the command:</description>
    </item>
    
    <item>
      <title>Separating the Content of 2 Websites Generated by 1 Hugo Project with a Bash Script</title>
      <link>https://loopedline.com/post/separating-the-content-of-2-websites-generated-by-1-hugo-project-with-a-bash-script/</link>
      <pubDate>Tue, 24 May 2022 21:30:12 -0400</pubDate>
      
      <guid>https://loopedline.com/post/separating-the-content-of-2-websites-generated-by-1-hugo-project-with-a-bash-script/</guid>
      <description>Background This project is built with Hugo and uses the Minimal Hugo theme.
This post is part of an ongoing effort to tailor the theme over time.
Specifically, this post is part of a project to build a contact form with Hugo and host it with Netlify.
Objective In this post we&amp;rsquo;ll develop Bash scripts to separate the content for two website subdomains that was generated by one Hugo project.</description>
    </item>
    
    <item>
      <title>Project - Building a Contact Form With Hugo and Hosting it with Netlify</title>
      <link>https://loopedline.com/post/project-building-a-contact-form-with-hugo-and-hosting-it-with-netlify/</link>
      <pubDate>Fri, 20 May 2022 12:18:46 -0400</pubDate>
      
      <guid>https://loopedline.com/post/project-building-a-contact-form-with-hugo-and-hosting-it-with-netlify/</guid>
      <description>Background This project is built with Hugo and uses the Minimal Hugo theme.
This post is part of an ongoing effort to tailor the theme over time.
Specifically, this is the first post for a project to build a contact form with Hugo and host it with Netlify.
Objective In this post we&amp;rsquo;ll outline the overall approach for the project.
There are many ways to accomplish this task offering various tradeoffs.</description>
    </item>
    
    <item>
      <title>Simplifying Hugo Post Creation with a Bash Script</title>
      <link>https://loopedline.com/post/simplifying-hugo-post-creation-with-a-bash-script/</link>
      <pubDate>Sun, 13 Mar 2022 22:16:57 -0400</pubDate>
      
      <guid>https://loopedline.com/post/simplifying-hugo-post-creation-with-a-bash-script/</guid>
      <description>Background Creating new posts in Hugo is already pretty simple thanks to the post creation command, but it can help to remove even little bits of friction.
Two points of friction in the current process are:
 navigating to the project directory, and properly formatting the new file name by remembering to name the file with dashes (-) instead of spaces and including the .md file extension  In the same way that we simplified updating Hugo front matter with a Bash script, we can use a script to make post creation even simpler as well.</description>
    </item>
    
    <item>
      <title>Automating Hugo Website Publishing Workflow with Bash</title>
      <link>https://loopedline.com/post/automating-hugo-website-publishing-with-bash/</link>
      <pubDate>Thu, 03 Mar 2022 14:49:33 -0500</pubDate>
      
      <guid>https://loopedline.com/post/automating-hugo-website-publishing-with-bash/</guid>
      <description>Introduction Background We first need to define our terms.
Hugo already builds sites with one quick and easy command.
The automated website building this post refers to is several additional steps required for website publishing after that process in one particular workflow. Every person&amp;rsquo;s or team&amp;rsquo;s workflow for publishing a website is different. The workflow we&amp;rsquo;ll automate in this post includes the following:
 rebuilding a specific website with Hugo deleting all files and subdirectories in the website publishing directory except one specified file copying all files from the Hugo website project directory to the publishing directory  We&amp;rsquo;ll handle each step in turn and then bring them all together.</description>
    </item>
    
    <item>
      <title>Renaming Files with the rename Command (the Perl Version)</title>
      <link>https://loopedline.com/post/renaming-files-with-rename-command-the-perl-version/</link>
      <pubDate>Wed, 02 Mar 2022 21:21:25 -0500</pubDate>
      
      <guid>https://loopedline.com/post/renaming-files-with-rename-command-the-perl-version/</guid>
      <description>Renaming files with the rename command Renaming files is a basic and mundane task.
Fortunately, there are several tools to make it easier.
The Perl version of rename available in Bash on many Linux distributions is especially powerful since it can utilize regular expressions.
Confirm which version(s) of rename you have available As previously mentioned there can be more than one version of the rename command on your system. So you&amp;rsquo;ll first want to confirm that you have the Perl version of rename installed and verify how the command is invoked on your system.</description>
    </item>
    
    <item>
      <title>Automating Bash Shell Commands</title>
      <link>https://loopedline.com/post/automating-bash-shell-commands/</link>
      <pubDate>Fri, 25 Feb 2022 15:09:52 -0500</pubDate>
      
      <guid>https://loopedline.com/post/automating-bash-shell-commands/</guid>
      <description>Introduction to automating shell commands There is a lot that can be accomplished efficiently with Bash.
After getting started working with Bash you&amp;rsquo;ll quickly discover commands that you run again and again.
For some simple commands you can make them even more convenient by creating a shell alias or a shell function.
Other commands involving multiple steps you can typically use and manage more efficiently by creating a shell script.</description>
    </item>
    
    <item>
      <title>Creating a Directory with Bash to Test Commands</title>
      <link>https://loopedline.com/post/creating-a-directory-with-bash-to-test-commands/</link>
      <pubDate>Thu, 24 Feb 2022 13:51:11 -0500</pubDate>
      
      <guid>https://loopedline.com/post/creating-a-directory-with-bash-to-test-commands/</guid>
      <description>Why create a test directory? When learning to work with new commands or programs it makes sense to be careful.
In particular, command line tools can be especially powerful. They can allow the user to delete or overwrite data before they realize what has happened. It makes sense to be careful, especially when learning how to use a command.
One way to partially limit that risk is to work in a test directory when trying new commands.</description>
    </item>
    
    <item>
      <title>Creating Multiple Files with Bash</title>
      <link>https://loopedline.com/post/creating-multiple-files-with-bash/</link>
      <pubDate>Wed, 16 Feb 2022 11:11:18 -0500</pubDate>
      
      <guid>https://loopedline.com/post/creating-multiple-files-with-bash/</guid>
      <description>Introduction When you want to create multiple files, Bash can help do it efficiently.
Below are several examples for creating files. To follow along, navigate to an empty folder where you want to create files and enter the commands.
A warning You may wish to remove files after each step, but since the rm command is powerful and can delete more files than you intended without prompting, make sure you understand its use before blindly applying the example commands below.</description>
    </item>
    
    <item>
      <title>Getting Started with the shuf Command in Bash</title>
      <link>https://loopedline.com/post/getting-started-with-shuf-command-in-bash/</link>
      <pubDate>Tue, 15 Feb 2022 13:57:10 -0500</pubDate>
      
      <guid>https://loopedline.com/post/getting-started-with-shuf-command-in-bash/</guid>
      <description>Introduction There are many, many, ways to create (pseudo)-random strings in Bash, but I found this approach utilizing shuf to be the most understandable. Also, it gives excellent control over the output (avoiding whitespace and special characters) without resorting to the use of the tr command to remove unwanted characters. And it seems to be available for many systems without requiring installation of additional packages.
The shuf command When first learning about a command like shuf it is helpful to start by reading the tldr and info entries for the command.</description>
    </item>
    
    <item>
      <title>Using the sed Command in a Bash Script to Update Hugo Front Matter</title>
      <link>https://loopedline.com/post/using-sed-in-bash-script-to-update-hugo-front-matter/</link>
      <pubDate>Fri, 11 Feb 2022 11:37:37 -0500</pubDate>
      
      <guid>https://loopedline.com/post/using-sed-in-bash-script-to-update-hugo-front-matter/</guid>
      <description>Background Hugo used to have an undraft command to quickly alter front matter before publishing, but it was removed.
The command would update &amp;ldquo;the content’s draft status from ‘True’ to ‘False’ and&amp;hellip; the date to the current date and time&amp;rdquo;.
That&amp;rsquo;s useful functionality, so we&amp;rsquo;ll replicate it with a Bash script.
For this project we&amp;rsquo;ll use sed, which is one of the basic programs that comes with most distributions of Linux and it&amp;rsquo;s useful for (among other things) replacing segments of text.</description>
    </item>
    
    <item>
      <title>Getting started with the $RANDOM Variable in Bash</title>
      <link>https://loopedline.com/post/getting-started-with-random-variable-in-bash/</link>
      <pubDate>Mon, 07 Feb 2022 15:48:06 -0500</pubDate>
      
      <guid>https://loopedline.com/post/getting-started-with-random-variable-in-bash/</guid>
      <description>Creating Randomness in Bash There are many shell variables used in [Bash]((https://loopedline.com/post/bash-getting-started-working-with-the-shell/). One of them is the Bash variable $RANDOM.
$RANDOM returns a pseudo-random number between 0 and 32767.
Try it by typing the following command into a Bash command line interpreter:
echo $RANDOM Run the command multiple times to see different results.
Changing the possible return range We can reduce the range of the output by using the modulo operator.</description>
    </item>
    
    <item>
      <title>There&#39;s a Difference Between rename and rename.ul in Bash</title>
      <link>https://loopedline.com/post/difference-between-rename-and-rename.ul/</link>
      <pubDate>Wed, 08 Dec 2021 13:20:10 -0500</pubDate>
      
      <guid>https://loopedline.com/post/difference-between-rename-and-rename.ul/</guid>
      <description>Confusion with rename There are several software packages with the name &amp;ldquo;rename&amp;rdquo; available for Bash.
That can cause confusion if you&amp;rsquo;re not aware of the fact.
Adding to the confusion, on many distributions of Linux, like Debian and Ubuntu, the rename command doesn&amp;rsquo;t refer to the &amp;ldquo;rename&amp;rdquo; that is part of the util-linux package. Instead, it likely refers to a &amp;ldquo;perl-rename&amp;rdquo; package. To call the util-linux version you&amp;rsquo;ll likely have to use the rename.</description>
    </item>
    
    <item>
      <title>Bash - Getting Started Working with the Shell</title>
      <link>https://loopedline.com/post/bash-getting-started-working-with-the-shell/</link>
      <pubDate>Sun, 05 Dec 2021 17:12:50 -0500</pubDate>
      
      <guid>https://loopedline.com/post/bash-getting-started-working-with-the-shell/</guid>
      <description>Introduction to Bash When you think of someone expertly working with a computer you might picture them stereotypically entering commands on a black screen with green text, the computer responding with rapidly scrolling walls of characters.
For a long time I didn&amp;rsquo;t realize the thing they were typing in was called a shell. (The differences between a terminal, console, command line, and shell are nuanced. Many of the responses to this StackExchange question offer some helpful insight and perspective on the topic.</description>
    </item>
    
  </channel>
</rss>