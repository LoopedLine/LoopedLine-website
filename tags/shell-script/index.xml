<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell script on LoopedLine</title>
    <link>https://loopedline.com/tags/shell-script/</link>
    <description>Recent content in shell script on LoopedLine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Nov 2022 13:46:39 -0500</lastBuildDate><atom:link href="https://loopedline.com/tags/shell-script/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Backing Up Visual Studio Code (VS Code) Settings and Extensions With a Bash Script</title>
      <link>https://loopedline.com/post/backing-up-vs-code-settings-and-extensions-with-a-bash-script/</link>
      <pubDate>Wed, 09 Nov 2022 13:46:39 -0500</pubDate>
      
      <guid>https://loopedline.com/post/backing-up-vs-code-settings-and-extensions-with-a-bash-script/</guid>
      <description>Introduction This post is part of a series about automating data backups in Linux.
In the previous post we automated the process to backup a .bashrc file with a Bash script.
In this post we&amp;rsquo;ll automate the process of backing up Visual Studio Code (VS Code) settings and a list of installed extensions with a Bash script.
The Script We&amp;rsquo;ve developed Bash scripts for automating tasks in previous posts, so we&amp;rsquo;ll leverage that work and modify it for our current purposes.</description>
    </item>
    
    <item>
      <title>Backing Up a Directory Structure With the Tree Command in a Bash Script</title>
      <link>https://loopedline.com/post/backing-up-a-directory-structure-with-the-tree-command-in-a-bash-script/</link>
      <pubDate>Mon, 07 Nov 2022 13:19:14 -0500</pubDate>
      
      <guid>https://loopedline.com/post/backing-up-a-directory-structure-with-the-tree-command-in-a-bash-script/</guid>
      <description>Introduction This post is part of a series about automating data backups in Linux.
In the previous post we automated the process to backup a .bashrc file with a Bash script.
Similarly, in this post we&amp;rsquo;ll automate the process of saving the layout of several specific directories with a Bash script.
The Script We&amp;rsquo;ve developed Bash scripts for automating tasks in previous posts, so we&amp;rsquo;ll leverage that work and modify it for our current purposes.</description>
    </item>
    
    <item>
      <title>Backing Up the .bashrc File with a Bash Script</title>
      <link>https://loopedline.com/post/backing-up-the-bashrc-file-with-a-bash-script/</link>
      <pubDate>Fri, 04 Nov 2022 21:36:51 -0400</pubDate>
      
      <guid>https://loopedline.com/post/backing-up-the-bashrc-file-with-a-bash-script/</guid>
      <description>Introduction This post is part of a series about automating data backups in Linux.
In this post we&amp;rsquo;ll construct a Bash script to automate the backup of the .bashrc file.
The Script We&amp;rsquo;ve developed Bash scripts for automating tasks in previous posts so we&amp;rsquo;ll leverage that work and modify it for our current purposes.
Script code backup_bashrc.sh
#!/bin/bash  # VARIABLES bashrc_directory=&amp;#34;/home/$USER/&amp;#34; bashrc_filename=&amp;#34;.bashrc&amp;#34; backup_top_directory=&amp;#34;/home/$USER/backups/&amp;#34; backup_filename=&amp;#34;backup_of_bashrc_$(date +%Y-%m-%d)&amp;#34;  # VARIABLES, constructed bashrc_location=$bashrc_directory$bashrc_filename backup_output_directory=$backup_top_directory$backup_filename  # FUNCTION # Provides contextual output script_info() { echo echo echo echo echo ============================================================= echo ==================== script info - START ==================== echo echo &amp;#34;Executing $BASH_SOURCE&amp;#34; echo echo &amp;#34;.</description>
    </item>
    
    <item>
      <title>Adding Sequence IDs to Hugo Post Filenames</title>
      <link>https://loopedline.com/post/adding-sequence-ids-to-hugo-post-filenames/</link>
      <pubDate>Sun, 29 May 2022 08:14:26 -0400</pubDate>
      
      <guid>https://loopedline.com/post/adding-sequence-ids-to-hugo-post-filenames/</guid>
      <description>Background This project is built with Hugo and uses the Minimal Hugo theme.
Currently, when new posts are created with the hugo new &amp;lt;file_name&amp;gt; command, a new file is created named with the file_name parameter passed to the command. With the help of the post archetype file, that filename is also used to create the post title.
That approach is fine for a small number of posts, but as the number of posts grows it becomes harder to find a specific post when looking, because files are sorted alphabetically by filename, which isn&amp;rsquo;t particularly helpful in many cases.</description>
    </item>
    
    <item>
      <title>Creating a Persistent Sequence ID Counter With Bash</title>
      <link>https://loopedline.com/post/creating-a-persistent-sequence-id-counter-with-bash/</link>
      <pubDate>Fri, 27 May 2022 22:31:44 -0400</pubDate>
      
      <guid>https://loopedline.com/post/creating-a-persistent-sequence-id-counter-with-bash/</guid>
      <description>Objective In this post we&amp;rsquo;ll create a persistent counter for generating unique sequence IDs using a Bash script.
Building the solution We&amp;rsquo;ll build the persistent counter using two files
 a counter file that stores the next seqid a script that reads and increments the seqid  Creating the counter file Creating the counter file is very simple.
We&amp;rsquo;ll create a file named counter_next_test.txt with the Bash command:
touch counter_next_test.txt And we&amp;rsquo;ll populate it with the value 1 with the command:</description>
    </item>
    
    <item>
      <title>Separating the Content of 2 Websites Generated by 1 Hugo Project with a Bash Script</title>
      <link>https://loopedline.com/post/separating-the-content-of-2-websites-generated-by-1-hugo-project-with-a-bash-script/</link>
      <pubDate>Tue, 24 May 2022 21:30:12 -0400</pubDate>
      
      <guid>https://loopedline.com/post/separating-the-content-of-2-websites-generated-by-1-hugo-project-with-a-bash-script/</guid>
      <description>Background This project is built with Hugo and uses the Minimal Hugo theme.
This post is part of an ongoing effort to tailor the theme over time.
Specifically, this post is part of a project to build a contact form with Hugo and host it with Netlify.
Objective In this post we&amp;rsquo;ll develop Bash scripts to separate the content for two website subdomains that was generated by one Hugo project.</description>
    </item>
    
    <item>
      <title>Project - Building a Contact Form With Hugo and Hosting it with Netlify</title>
      <link>https://loopedline.com/post/project-building-a-contact-form-with-hugo-and-hosting-it-with-netlify/</link>
      <pubDate>Fri, 20 May 2022 12:18:46 -0400</pubDate>
      
      <guid>https://loopedline.com/post/project-building-a-contact-form-with-hugo-and-hosting-it-with-netlify/</guid>
      <description>Background This project is built with Hugo and uses the Minimal Hugo theme.
This post is part of an ongoing effort to tailor the theme over time.
Specifically, this is the first post for a project to build a contact form with Hugo and host it with Netlify.
Objective In this post we&amp;rsquo;ll outline the overall approach for the project.
There are many ways to accomplish this task offering various tradeoffs.</description>
    </item>
    
    <item>
      <title>Simplifying Hugo Post Creation with a Bash Script</title>
      <link>https://loopedline.com/post/simplifying-hugo-post-creation-with-a-bash-script/</link>
      <pubDate>Sun, 13 Mar 2022 22:16:57 -0400</pubDate>
      
      <guid>https://loopedline.com/post/simplifying-hugo-post-creation-with-a-bash-script/</guid>
      <description>Background Creating new posts in Hugo is already pretty simple thanks to the post creation command, but it can help to remove even little bits of friction.
Two points of friction in the current process are:
 navigating to the project directory, and properly formatting the new file name by remembering to name the file with dashes (-) instead of spaces and including the .md file extension  In the same way that we simplified updating Hugo front matter with a Bash script, we can use a script to make post creation even simpler as well.</description>
    </item>
    
    <item>
      <title>Automating Hugo Website Publishing Workflow with Bash</title>
      <link>https://loopedline.com/post/automating-hugo-website-publishing-with-bash/</link>
      <pubDate>Thu, 03 Mar 2022 14:49:33 -0500</pubDate>
      
      <guid>https://loopedline.com/post/automating-hugo-website-publishing-with-bash/</guid>
      <description>Introduction Background We first need to define our terms.
Hugo already builds sites with one quick and easy command.
The automated website building this post refers to is several additional steps required for website publishing after that process in one particular workflow. Every person&amp;rsquo;s or team&amp;rsquo;s workflow for publishing a website is different. The workflow we&amp;rsquo;ll automate in this post includes the following:
 rebuilding a specific website with Hugo deleting all files and subdirectories in the website publishing directory except one specified file copying all files from the Hugo website project directory to the publishing directory  We&amp;rsquo;ll handle each step in turn and then bring them all together.</description>
    </item>
    
    <item>
      <title>Automating Bash Shell Commands</title>
      <link>https://loopedline.com/post/automating-bash-shell-commands/</link>
      <pubDate>Fri, 25 Feb 2022 15:09:52 -0500</pubDate>
      
      <guid>https://loopedline.com/post/automating-bash-shell-commands/</guid>
      <description>Introduction to automating shell commands There is a lot that can be accomplished efficiently with Bash.
After getting started working with Bash you&amp;rsquo;ll quickly discover commands that you run again and again.
For some simple commands you can make them even more convenient by creating a shell alias or a shell function.
Other commands involving multiple steps you can typically use and manage more efficiently by creating a shell script.</description>
    </item>
    
    <item>
      <title>Using the sed Command in a Bash Script to Update Hugo Front Matter</title>
      <link>https://loopedline.com/post/using-sed-in-bash-script-to-update-hugo-front-matter/</link>
      <pubDate>Fri, 11 Feb 2022 11:37:37 -0500</pubDate>
      
      <guid>https://loopedline.com/post/using-sed-in-bash-script-to-update-hugo-front-matter/</guid>
      <description>Background Hugo used to have an undraft command to quickly alter front matter before publishing, but it was removed.
The command would update &amp;ldquo;the content’s draft status from ‘True’ to ‘False’ and&amp;hellip; the date to the current date and time&amp;rdquo;.
That&amp;rsquo;s useful functionality, so we&amp;rsquo;ll replicate it with a Bash script.
For this project we&amp;rsquo;ll use sed, which is one of the basic programs that comes with most distributions of Linux and it&amp;rsquo;s useful for (among other things) replacing segments of text.</description>
    </item>
    
  </channel>
</rss>
