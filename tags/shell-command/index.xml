<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell command on LoopedLine</title>
    <link>https://loopedline.com/tags/shell-command/</link>
    <description>Recent content in shell command on LoopedLine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Oct 2023 22:36:01 -0400</lastBuildDate><atom:link href="https://loopedline.com/tags/shell-command/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bash and The Linux Shell - Basic Terminal Command Quick Reference</title>
      <link>https://loopedline.com/post/bash-and-the-linux-shell-basic-terminal-command-quick-reference/</link>
      <pubDate>Wed, 18 Oct 2023 22:36:01 -0400</pubDate>
      
      <guid>https://loopedline.com/post/bash-and-the-linux-shell-basic-terminal-command-quick-reference/</guid>
      <description>Introduction This is part of a series about Bash and the Linux Shell.
Other posts in the series introduce and explain several basic terminal commands used in Bash and the Linux Shell.
This post serves as a quick reference for those commands.
Context In this post we&amp;rsquo;ll assume that Bash is installed and that all commands are entered in a Bash terminal.
While much of the information applies generally to Linux, some of the instructions will not apply to all systems.</description>
    </item>
    
    <item>
      <title>Bash and the Linux Shell - 02 - Getting Started with The Basics</title>
      <link>https://loopedline.com/post/bash-and-the-linux-shell-02-getting-started-with-the-basics/</link>
      <pubDate>Sun, 15 Oct 2023 10:05:33 -0400</pubDate>
      
      <guid>https://loopedline.com/post/bash-and-the-linux-shell-02-getting-started-with-the-basics/</guid>
      <description>Series This is part of a series about Bash and the Linux Shell.
The previous post looked at what Bash is and what it&amp;rsquo;s useful for.
In this post, we&amp;rsquo;ll look at the basics of getting started using Bash and the Linux Shell.
Introduction As we discussed in the previous post, Bash is a popular tool created from the GNU project for interacting with your computer via text commands.
By using these commands in Bash you are able to work directly with your operating system and many of the powerful tools that it offers.</description>
    </item>
    
    <item>
      <title>Bash and the Linux Shell - Topic</title>
      <link>https://loopedline.com/post/bash-and-the-linux-shell-topic/</link>
      <pubDate>Thu, 12 Oct 2023 15:12:11 -0400</pubDate>
      
      <guid>https://loopedline.com/post/bash-and-the-linux-shell-topic/</guid>
      <description>Introduction This is our central topic page for Bash and the Linux Shell.
Bash and the Linux shell are powerful tools. There is a lot that can be accomplished efficiently with Bash.
This post contains a curated list of resources for learning about Bash and the Linux shell. Some of the linked resources were produced by this project, though many are produced by others.
Youâ€™re not likely to need all of the resources listed here.</description>
    </item>
    
    <item>
      <title>Getting Started with the neofetch Command in Bash</title>
      <link>https://loopedline.com/post/getting-started-with-the-neofetch-command-in-bash/</link>
      <pubDate>Wed, 27 Sep 2023 12:30:04 -0400</pubDate>
      
      <guid>https://loopedline.com/post/getting-started-with-the-neofetch-command-in-bash/</guid>
      <description>Introduction Linux systems are made up of many components working together. And it may not always be clear to the user (especially a new user) what parts comprise their system.
If you have a question about what part was used for some portion of your system there are numerous fetches - tools for fetching system information - available for finding and printing system component information.
One popular option is neofetch.</description>
    </item>
    
    <item>
      <title>Getting Started with the trash Command in Bash</title>
      <link>https://loopedline.com/post/getting-started-with-the-trash-command-in-bash/</link>
      <pubDate>Mon, 25 Sep 2023 10:46:49 -0400</pubDate>
      
      <guid>https://loopedline.com/post/getting-started-with-the-trash-command-in-bash/</guid>
      <description>Introduction Deleting files is a basic function of using a computer. And on Linux, there is more than one way to delete things.
One of the tools, rm, comes standard but has some drawbacks.
Another tool, trash, does not come standard on most distributions, but provides some helpful protections.
We&amp;rsquo;ll discuss them both and take a brief look at how to use the trash tool.
Dangers of rm The command to delete files or directories that comes standard with nearly all Linux distributions is rm.</description>
    </item>
    
    <item>
      <title>Getting Started with the tldr Command in Bash</title>
      <link>https://loopedline.com/post/getting-started-with-the-tldr-command-in-bash/</link>
      <pubDate>Sun, 24 Sep 2023 22:02:42 -0400</pubDate>
      
      <guid>https://loopedline.com/post/getting-started-with-the-tldr-command-in-bash/</guid>
      <description>Introduction tldr is a really helpful tool for the command line.
It displays short, simple help pages for command line tools, from the user-maintained tldr-pages project.
The tldr entries are shorter and more digestible than man pages, so it is great for learning about other commands.
It does not come installed on most Linux distributions, but on many it is easy to install.
You can also use tldr via the web app without installing it.</description>
    </item>
    
    <item>
      <title>Use Caution When Copying and Pasting to the Command Line</title>
      <link>https://loopedline.com/post/use-caution-when-copying-and-pasting-to-the-command-line/</link>
      <pubDate>Wed, 20 Sep 2023 23:03:32 -0400</pubDate>
      
      <guid>https://loopedline.com/post/use-caution-when-copying-and-pasting-to-the-command-line/</guid>
      <description>An important note of caution Because Bash and the Linux shell are so powerful, you need to be cautious what commands you enter.
Running the wrong command (or the right command in the wrong place) can irretrievablly delete your personal data or allow your computer to be compromised.
Make sure you understand commands before you type them or copy and paste them to your machine.
As this article helpfully illustrates, you should not blindly copy and paste commands from the internet into your terminal.</description>
    </item>
    
    <item>
      <title>Getting Started with the tree Command in Bash</title>
      <link>https://loopedline.com/post/getting-started-with-the-tree-command-in-bash/</link>
      <pubDate>Sun, 06 Nov 2022 20:28:22 -0500</pubDate>
      
      <guid>https://loopedline.com/post/getting-started-with-the-tree-command-in-bash/</guid>
      <description>Introduction The tree command is extremely useful.
According to the tree homepage:
 Tree is a recursive directory listing command that produces a depth indented listing of files
 In other words, tree displays a visual tree of the directory, it&amp;rsquo;s subdirectories, and all their content.
It is much faster and much more understandable than using cd and ls commands repeatedly to understand a directory structure and content.
It might best be understood by example.</description>
    </item>
    
    <item>
      <title>Renaming Files with the rename Command (the Perl Version) in Bash</title>
      <link>https://loopedline.com/post/renaming-files-with-rename-command-the-perl-version/</link>
      <pubDate>Wed, 02 Mar 2022 21:21:25 -0500</pubDate>
      
      <guid>https://loopedline.com/post/renaming-files-with-rename-command-the-perl-version/</guid>
      <description>Renaming files with the rename command Renaming files is a basic and mundane task.
Fortunately, there are several tools to make it easier.
The Perl version of rename available in Bash on many Linux distributions is especially powerful since it can utilize regular expressions.
Confirm which version(s) of rename you have available As previously mentioned there can be more than one version of the rename command on your system. So you&amp;rsquo;ll first want to confirm that you have the Perl version of rename installed and verify how the command is invoked on your system.</description>
    </item>
    
    <item>
      <title>Automating Bash Shell Commands</title>
      <link>https://loopedline.com/post/automating-bash-shell-commands/</link>
      <pubDate>Fri, 25 Feb 2022 15:09:52 -0500</pubDate>
      
      <guid>https://loopedline.com/post/automating-bash-shell-commands/</guid>
      <description>Introduction to automating shell commands There is a lot that can be accomplished efficiently with Bash.
After getting started working with Bash you&amp;rsquo;ll quickly discover commands that you run again and again.
For some simple commands you can make them even more convenient by creating a shell alias or a shell function.
Other commands involving multiple steps you can typically use and manage more efficiently by creating a shell script.</description>
    </item>
    
    <item>
      <title>Creating a Directory with Bash to Test Commands</title>
      <link>https://loopedline.com/post/creating-a-directory-with-bash-to-test-commands/</link>
      <pubDate>Thu, 24 Feb 2022 13:51:11 -0500</pubDate>
      
      <guid>https://loopedline.com/post/creating-a-directory-with-bash-to-test-commands/</guid>
      <description>Why create a test directory? When learning to work with new commands or programs it makes sense to be careful.
In particular, command line tools can be especially powerful. They can allow the user to delete or overwrite data before they realize what has happened. Often, these effects will be irreversible.
One way to partially limit that risk is to work in a test directory when trying new commands. The scope of a command&amp;rsquo;s effects is often (but not always) bounded within a directory, so this can provide some protection against unintended consequences.</description>
    </item>
    
    <item>
      <title>Creating Multiple Files with Bash</title>
      <link>https://loopedline.com/post/creating-multiple-files-with-bash/</link>
      <pubDate>Wed, 16 Feb 2022 11:11:18 -0500</pubDate>
      
      <guid>https://loopedline.com/post/creating-multiple-files-with-bash/</guid>
      <description>Introduction When you want to create multiple files, Bash can help do it efficiently.
Below are several examples for creating files. To follow along, navigate to an empty folder where you want to create files and enter the commands.
A warning You may wish to remove files after each step, but since the rm command is powerful and can delete more files than you intended without prompting, make sure you understand its use before blindly applying the example commands below.</description>
    </item>
    
    <item>
      <title>Getting Started with the shuf Command in Bash</title>
      <link>https://loopedline.com/post/getting-started-with-shuf-command-in-bash/</link>
      <pubDate>Tue, 15 Feb 2022 13:57:10 -0500</pubDate>
      
      <guid>https://loopedline.com/post/getting-started-with-shuf-command-in-bash/</guid>
      <description>Introduction There are many, many, ways to create (pseudo)-random strings in Bash, but I found this approach utilizing shuf to be the most understandable. Also, it gives excellent control over the output (avoiding whitespace and special characters) without resorting to the use of the tr command to remove unwanted characters. And it seems to be available for many systems without requiring installation of additional packages.
The shuf command When first learning about a command like shuf it is helpful to start by reading the tldr and info entries for the command.</description>
    </item>
    
    <item>
      <title>Using the sed Command in a Bash Script to Update Hugo Front Matter</title>
      <link>https://loopedline.com/post/using-sed-in-bash-script-to-update-hugo-front-matter/</link>
      <pubDate>Fri, 11 Feb 2022 11:37:37 -0500</pubDate>
      
      <guid>https://loopedline.com/post/using-sed-in-bash-script-to-update-hugo-front-matter/</guid>
      <description>Background Hugo used to have an undraft command to quickly alter front matter before publishing, but it was removed.
The command would update &amp;ldquo;the contentâ€™s draft status from â€˜Trueâ€™ to â€˜Falseâ€™ and&amp;hellip; the date to the current date and time&amp;rdquo;.
That&amp;rsquo;s useful functionality, so we&amp;rsquo;ll replicate it with a Bash script.
For this project we&amp;rsquo;ll use sed, which is one of the basic programs that comes with most distributions of Linux and it&amp;rsquo;s useful for (among other things) replacing segments of text.</description>
    </item>
    
    <item>
      <title>Getting started with the $RANDOM Variable in Bash</title>
      <link>https://loopedline.com/post/getting-started-with-random-variable-in-bash/</link>
      <pubDate>Mon, 07 Feb 2022 15:48:06 -0500</pubDate>
      
      <guid>https://loopedline.com/post/getting-started-with-random-variable-in-bash/</guid>
      <description>Creating Randomness in Bash There are many shell variables used in Bash. One of them is the Bash variable $RANDOM.
$RANDOM returns a pseudo-random number between 0 and 32767.
Try it by typing the following command into a Bash command line interpreter:
echo $RANDOM Run the command multiple times to see different results.
Changing the possible return range We can reduce the range of the output by using the modulo operator.</description>
    </item>
    
    <item>
      <title>There&#39;s a Difference Between rename and rename.ul in Bash</title>
      <link>https://loopedline.com/post/difference-between-rename-and-rename.ul/</link>
      <pubDate>Wed, 08 Dec 2021 13:20:10 -0500</pubDate>
      
      <guid>https://loopedline.com/post/difference-between-rename-and-rename.ul/</guid>
      <description>Confusion with rename There are several software packages with the name &amp;ldquo;rename&amp;rdquo; available for Bash.
That can cause confusion if you&amp;rsquo;re not aware of the fact.
Adding to the confusion, on many distributions of Linux, like Debian and Ubuntu, the rename command doesn&amp;rsquo;t refer to the &amp;ldquo;rename&amp;rdquo; that is part of the util-linux package. Instead, it likely refers to a &amp;ldquo;perl-rename&amp;rdquo; package. To call the util-linux version you&amp;rsquo;ll likely have to use the rename.</description>
    </item>
    
  </channel>
</rss>
